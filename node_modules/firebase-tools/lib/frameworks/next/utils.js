"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextjsRewritesToUse = exports.isHeaderSupportedByFirebase = exports.isRedirectSupportedByFirebase = exports.isRewriteSupportedByFirebase = exports.cleanEscapedChars = exports.pathHasRegex = void 0;
const utils_1 = require("../utils");
function pathHasRegex(path) {
    return /(?<!\\)\(/.test(path);
}
exports.pathHasRegex = pathHasRegex;
function cleanEscapedChars(path) {
    return path.replace(/\\([(){}:+?*])/g, (a, b) => b);
}
exports.cleanEscapedChars = cleanEscapedChars;
function isRewriteSupportedByFirebase(rewrite) {
    return !("has" in rewrite || pathHasRegex(rewrite.source) || (0, utils_1.isUrl)(rewrite.destination));
}
exports.isRewriteSupportedByFirebase = isRewriteSupportedByFirebase;
function isRedirectSupportedByFirebase(redirect) {
    return !("has" in redirect || pathHasRegex(redirect.source) || "internal" in redirect);
}
exports.isRedirectSupportedByFirebase = isRedirectSupportedByFirebase;
function isHeaderSupportedByFirebase(header) {
    return !("has" in header || pathHasRegex(header.source));
}
exports.isHeaderSupportedByFirebase = isHeaderSupportedByFirebase;
function getNextjsRewritesToUse(nextJsRewrites) {
    if (Array.isArray(nextJsRewrites)) {
        return nextJsRewrites;
    }
    if (nextJsRewrites === null || nextJsRewrites === void 0 ? void 0 : nextJsRewrites.beforeFiles) {
        return nextJsRewrites.beforeFiles;
    }
    return [];
}
exports.getNextjsRewritesToUse = getNextjsRewritesToUse;
